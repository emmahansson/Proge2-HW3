#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <limits>

// Class to encapsulate the array generation and file writing logic
class ArrayGenerator {
private:
    double x;
    double epsilon;
    std::vector<double> array;
    int length;

    // Function prototypes
    double getInputX();
    double getInputEpsilon();
    void generateArray(int index);
    void writeArrayToFile();

public:
    // Constructor to initialize and run the process
    ArrayGenerator() : array(15) {
        x = getInputX();
        epsilon = getInputEpsilon();
        generateArray(0);
        writeArrayToFile();
    }
};

int main() {
    ArrayGenerator generator;
    return 0;
}

// Function to get input for X with validation
double ArrayGenerator::getInputX() {
    double inputX;
    while (true) {
        std::cout << "Enter X (-1 < X < 1): ";
        std::cin >> inputX;
        if (std::cin.fail()) {
            std::cout << "Invalid input. Please enter a number.\n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            continue;
        }
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        if (inputX >= 1 || inputX <= -1) {
            std::cout << "Invalid input. X must be between -1 and 1. Please try again.\n";
        } else {
            break;
        }
    }
    return inputX;
}

// Function to get input for epsilon with validation
double ArrayGenerator::getInputEpsilon() {
    double inputEpsilon;
    while (true) {
        std::cout << "Enter epsilon (0 < epsilon < 1): ";
        std::cin >> inputEpsilon;
        if (std::cin.fail()) {
            std::cout << "Invalid input. Please enter a number.\n";
            std::cin.clear();
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            continue;
        }
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        if (inputEpsilon >= 1 || inputEpsilon <= 0) {
            std::cout << "Invalid input. Epsilon must be between 0 and 1. Please try again.\n";
        } else {
            break;
        }
    }
    return inputEpsilon;
}

// Recursive function to generate the array
void ArrayGenerator::generateArray(int index) {
    if (index == 0) {
        array[0] = x;
        length = 1;
        generateArray(1);
        return;
    }

    // Calculate the element
    array[index] = (index % 2 == 0 ? 1 : -1) * x;

    double numerator = 1.0, denominator = 1.0;
    for (int i = 1; i < index; i++) {
        numerator *= (2.0 * i - 1.0);
        denominator *= (2.0 * i);
    }
    double x_power = 1.0;
    for (int i = 0; i < 2 * index - 1; i++) {
        x_power *= x;
    }
    array[index] *= (numerator / denominator) * x_power / (2 * index - 1);

    if (fabs(array[index] - array[index - 1]) <= epsilon || index == 14) {
        length = index + 1;
        return;
    }

    generateArray(index + 1);
}

// Function to write the array to a file
void ArrayGenerator::writeArrayToFile() {
    std::ofstream file("F.txt");
    if (!file.is_open()) {
        std::cerr << "Error opening file!\n";
        return;
    }

    file << length << std::endl;
    for (int i = 0; i < length; i++) {
        file << "A[" << i << "] = " << array[i] << std::endl;
    }

    file.close();
}

